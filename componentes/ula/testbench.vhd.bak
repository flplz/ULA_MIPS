library IEEE;
use IEEE.std_logic_1164.all;
use ieee.math_real.all;
use ieee.numeric_std.all;
use ieee.std_logic_unsigned.all;
use IEEE.std_logic_textio.all;
use std.textio.all;
 
entity testbench is
end testbench; 
 
architecture tb of testbench is
 
signal inputA: std_logic_vector(31 DOWNTO 0);
signal inputB: std_logic_vector(31 DOWNTO 0);
signal output: std_logic_vector(13 downto 0);
 signal clk         :    std_logic;--in
 signal iniciar     :    std_logic;--in
 signal reset     :    std_logic;--in
 signal pronto: std_logic; -- out
 signal fim: std_logic_vector(3 downto 0); -- out
signal teste:  std_logic_vector(13 downto 0);
signal controle_var: std_logic_vector(4 downto 0);
 
constant relogio: TIME:= 10 ns;
constant desl_init: time:= 100 ns;
CONSTANT passo : TIME := 600 ns;     
 
begin
 
     
 
  -- Connect DUV
  DUT: entity work.sad_v3
    port map(inputA,inputB,clk,iniciar,reset,pronto,fim,output);
     clk_process: process
        begin
            clk <='0';
            wait for relogio/2;
            clk <='1';
            wait for relogio/2;
    end process;
 
  stim: process is
    file arquivo_de_estimulos : text open read_mode is "../../estimulos.dat";
    variable linha_de_estimulos: line;
    variable espaco: character;
    variable valor_de_entrada_a: bit_vector(31 downto 0);
      variable valor_de_entrada_b: bit_vector(31 downto 0);
    variable valor_de_saida: bit_vector(13 downto 0);
     variable controle: unsigned (4 downto 0);
     
     begin
     
     controle_var <= std_logic_vector(controle);
     
    while not endfile(arquivo_de_estimulos) loop
        reset<= '0';
        iniciar <='1';
        controle := "00001";
      -- read inputs
        readline(arquivo_de_estimulos, linha_de_estimulos);
        read(linha_de_estimulos, valor_de_entrada_a);
        inputA  <= to_stdlogicvector(valor_de_entrada_a);
        read(linha_de_estimulos, espaco);
        read(linha_de_estimulos, valor_de_entrada_b);
        inputB  <= to_stdlogicvector(valor_de_entrada_b);
        read(linha_de_estimulos, espaco);
        wait for 50 ns;
		  iniciar<='0';
        while controle(4) = '0' loop
            read(linha_de_estimulos, valor_de_entrada_a);
            inputA  <= to_stdlogicvector(valor_de_entrada_a);
            read(linha_de_estimulos, espaco);
            read(linha_de_estimulos, valor_de_entrada_b);
            inputB  <= to_stdlogicvector(valor_de_entrada_b);
            read(linha_de_estimulos, espaco);
            controle := controle + 1;
            wait for 30 ns;
            controle_var <= std_logic_vector(controle);
        end loop;
        controle := "00001";
      read(linha_de_estimulos, valor_de_saida);
        teste <= to_stdlogicvector(valor_de_saida);
      wait until pronto='1';
			wait for 5 ns;
            assert(pronto='1')
                report "Pronto nao levantado" severity error;
            assert(fim="0000")
                report "endereco nao resetado" severity error;
         assert (output = to_stdlogicvector(valor_de_saida)) 
          report  "Valor Incorreto " severity error;
    end loop;
 
    wait for passo;
    assert false report "Test done." severity note;
    wait;
  end process;
end tb;